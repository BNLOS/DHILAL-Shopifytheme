// Theme JavaScript document.addEventListener('DOMContentLoaded', function() { 'use strict'; // Theme configuration const theme = { rtl: document.documentElement.dir === 'rtl', locale: document.documentElement.lang, currency: 'SAR' }; // Mobile Menu Toggle const mobileMenuToggle = document.querySelector('.mobile-menu-toggle'); const mobileNav = document.querySelector('.mobile-nav'); const mobileMenuOverlay = document.querySelector('.mobile-menu-overlay'); const mobileNavClose = document.querySelector('.mobile-nav-close'); if (mobileMenuToggle) { mobileMenuToggle.addEventListener('click', function() { mobileNav.classList.toggle('active'); mobileMenuOverlay.classList.toggle('active'); mobileMenuToggle.classList.toggle('active'); document.body.style.overflow = mobileNav.classList.contains('active') ? 'hidden' : ''; }); } if (mobileNavClose) { mobileNavClose.addEventListener('click', closeMobileMenu); } if (mobileMenuOverlay) { mobileMenuOverlay.addEventListener('click', closeMobileMenu); } function closeMobileMenu() { mobileNav.classList.remove('active'); mobileMenuOverlay.classList.remove('active'); mobileMenuToggle.classList.remove('active'); document.body.style.overflow = ''; } // Search Drawer const searchToggle = document.querySelector('.search-toggle'); const searchDrawer = document.querySelector('.search-drawer'); const searchClose = document.querySelector('.search-close'); if (searchToggle) { searchToggle.addEventListener('click', function() { searchDrawer.classList.add('active'); }); } if (searchClose) { searchClose.addEventListener('click', function() { searchDrawer.classList.remove('active'); }); } // Mini Cart Drawer const cartIcon = document.querySelector('.cart-icon'); const miniCartDrawer = document.querySelector('.mini-cart-drawer'); const miniCartClose = document.querySelector('.mini-cart-close'); if (cartIcon) { cartIcon.addEventListener('click', function(e) { e.preventDefault(); openMiniCart(); }); } if (miniCartClose) { miniCartClose.addEventListener('click', closeMiniCart); } function openMiniCart() { miniCartDrawer.classList.add('active'); mobileMenuOverlay.classList.add('active'); document.body.style.overflow = 'hidden'; loadMiniCart(); } function closeMiniCart() { miniCartDrawer.classList.remove('active'); mobileMenuOverlay.classList.remove('active'); document.body.style.overflow = ''; } // Load Mini Cart Content async function loadMiniCart() { try { const response = await fetch('/cart.js'); const cart = await response.json(); updateMiniCartContent(cart); } catch (error) { console.error('Error loading cart:', error); } } // Update Mini Cart Content function updateMiniCartContent(cart) { const cartContent = document.querySelector('[data-cart-content]'); if (!cartContent) return; if (cart.item_count === 0) { cartContent.innerHTML = ` <div class="cart-empty"> <p>${window.theme.strings.cartEmpty}</p> <a href="/collections/all" class="button">${window.theme.strings.continueShopping}</a> </div> `; } else { let itemsHTML = ''; cart.items.forEach(item => { itemsHTML += ` <div class="mini-cart-item" data-key="${item.key}"> <img src="${item.image}" alt="${item.title}"> <div class="mini-cart-item-info"> <div class="mini-cart-item-title">${item.title}</div> <div class="mini-cart-item-variant">${item.variant_title || ''}</div> <div class="mini-cart-item-price">${formatMoney(item.price)}</div> <div class="mini-cart-item-quantity"> <button class="qty-decrease" data-key="${item.key}">-</button> <input type="number" value="${item.quantity}" min="0" data-key="${item.key}"> <button class="qty-increase" data-key="${item.key}">+</button> </div> </div> <button class="mini-cart-remove" data-key="${item.key}"> <i class="fas fa-times"></i> </button> </div> `; }); cartContent.innerHTML = ` <div class="mini-cart-items">${itemsHTML}</div> <div class="mini-cart-footer"> <div class="mini-cart-total"> <span>${window.theme.strings.total}</span> <span>${formatMoney(cart.total_price)}</span> </div> <a href="/cart" class="button button-outline">${window.theme.strings.viewCart}</a> <button class="button" onclick="window.location.href='/checkout'">${window.theme.strings.checkout}</button> </div> `; // Add event listeners for quantity changes attachMiniCartEvents(); } // Update cart count updateCartCount(cart.item_count); } // Format money for Saudi Riyal function formatMoney(cents) { const amount = (cents / 100).toFixed(2); if (theme.rtl) { return `${amount} ${theme.currency}`; } return `${theme.currency} ${amount}`; } // Update Cart Count function updateCartCount(count) { const cartCounts = document.querySelectorAll('[data-cart-count]'); cartCounts.forEach(el => { el.textContent = count; }); } // Attach Mini Cart Events function attachMiniCartEvents() { // Quantity decrease document.querySelectorAll('.qty-decrease').forEach(btn => { btn.addEventListener('click', function() { const key = this.dataset.key; const input = document.querySelector(`input[data-key="${key}"]`); const newQty = Math.max(0, parseInt(input.value) - 1); updateCartItem(key, newQty); }); }); // Quantity increase document.querySelectorAll('.qty-increase').forEach(btn => { btn.addEventListener('click', function() { const key = this.dataset.key; const input = document.querySelector(`input[data-key="${key}"]`); const newQty = parseInt(input.value) + 1; updateCartItem(key, newQty); }); }); // Remove item document.querySelectorAll('.mini-cart-remove').forEach(btn => { btn.addEventListener('click', function() { updateCartItem(this.dataset.key, 0); }); }); } // Update Cart Item async function updateCartItem(key, quantity) { showLoading(); try { const response = await fetch('/cart/change.js', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ id: key, quantity: quantity }) }); const cart = await response.json(); updateMiniCartContent(cart); hideLoading(); } catch (error) { console.error('Error updating cart:', error); hideLoading(); } } // Add to Cart const addToCartForms = document.querySelectorAll('[data-add-to-cart-form]'); addToCartForms.forEach(form => { form.addEventListener('submit', async function(e) { e.preventDefault(); const formData = new FormData(this); showLoading(); try { const response = await fetch('/cart/add.js', { method: 'POST', body: formData }); const item = await response.json(); // Show success notification showNotification(window.theme.strings.addedToCart, 'success'); // Update cart count const cartResponse = await fetch('/cart.js'); const cart = await cartResponse.json(); updateCartCount(cart.item_count); // Open mini cart openMiniCart(); hideLoading(); } catch (error) { console.error('Error adding to cart:', error); showNotification(window.theme.strings.errorAddingToCart, 'error'); hideLoading(); } }); }); // Quick View const quickViewButtons = document.querySelectorAll('[data-quick-view]'); quickViewButtons.forEach(btn => { btn.addEventListener('click', function(e) { e.preventDefault(); const productHandle = this.dataset.productHandle; openQuickView(productHandle); }); }); async function openQuickView(handle) { showLoading(); try { const response = await fetch(`/products/${handle}.js`); const product = await response.json(); showQuickViewModal(product); hideLoading(); } catch (error) { console.error('Error loading product:', error); hideLoading(); } } function showQuickViewModal(product) { // Create and show quick view modal const modal = document.createElement('div'); modal.className = 'quick-view-modal'; modal.innerHTML = ` <div class="quick-view-content"> <button class="quick-view-close">&times;</button> <div class="quick-view-product"> <div class="quick-view-images"> <img src="${product.featured_image}" alt="${product.title}"> </div> <div class="quick-view-info"> <h2>${product.title}</h2> <div class="price">${formatMoney(product.price)}</div> <div class="description">${product.description}</div> <form data-add-to-cart-form> <input type="hidden" name="id" value="${product.variants[0].id}"> <div class="quantity-selector"> <label>${window.theme.strings.quantity}</label> <input type="number" name="quantity" value="1" min="1"> </div> <button type="submit" class="button">${window.theme.strings.addToCart}</button> </form> </div> </div> </div> `; document.body.appendChild(modal); // Close modal modal.querySelector('.quick-view-close').addEventListener('click', () => { modal.remove(); }); } // Wishlist Functionality const wishlistButtons = document.querySelectorAll('[data-wishlist-btn]'); let wishlist = JSON.parse(localStorage.getItem('wishlist') || '[]'); wishlistButtons.forEach(btn => { btn.addEventListener('click', function() { const productId = this.dataset.productId; toggleWishlist(productId); }); }); function toggleWishlist(productId) { const index = wishlist.indexOf(productId); if (index > -1) { wishlist.splice(index, 1); showNotification('تم إزالة المنتج من المفضلة', 'info'); } else { wishlist.push(productId); showNotification('تم إضافة المنتج للمفضلة', 'success'); } localStorage.setItem('wishlist', JSON.stringify(wishlist)); updateWishlistCount(); } function updateWishlistCount() { const wishlistCounts = document.querySelectorAll('[data-wishlist-count]'); wishlistCounts.forEach(el => { el.textContent = wishlist.length; }); } // Initialize wishlist count updateWishlistCount(); // Back to Top Button const backToTop = document.querySelector('.back-to-top'); window.addEventListener('scroll', function() { if (window.pageYOffset > 300) { backToTop.classList.add('show'); } else { backToTop.classList.remove('show'); } }); backToTop.addEventListener('click', function() { window.scrollTo({ top: 0, behavior: 'smooth' }); }); // Product Image Gallery const productThumbnails = document.querySelectorAll('[data-product-thumb]'); const mainImage = document.querySelector('[data-main-image]'); productThumbnails.forEach(thumb => { thumb.addEventListener('click', function() { const imageSrc = this.dataset.imageSrc; if (mainImage) { mainImage.src = imageSrc; } // Update active thumbnail productThumbnails.forEach(t => t.classList.remove('active')); this.classList.add('active'); }); }); // Currency Formatter for Saudi Riyal function formatSAR(amount) { return new Intl.NumberFormat('ar-SA', { style: 'currency', currency: 'SAR' }).format(amount); } // Collection Filters const filterOptions = document.querySelectorAll('[data-filter-option]'); const activeFilters = new Set(); filterOptions.forEach(option => { option.addEventListener('change', function() { if (this.checked) { activeFilters.add(this.value); } else { activeFilters.delete(this.value); } applyFilters(); }); }); function applyFilters() { // Apply filters to products const products = document.querySelectorAll('[data-product-item]'); products.forEach(product => { const productTags = product.dataset.tags?.split(',') || []; const shouldShow = activeFilters.size === 0 || [...activeFilters].some(filter => productTags.includes(filter)); product.style.display = shouldShow ? '' : 'none'; }); } // Sort Products const sortSelect = document.querySelector('[data-sort-select]'); if (sortSelect) { sortSelect.addEventListener('change', function() { const sortBy = this.value; const url = new URL(window.location); url.searchParams.set('sort_by', sortBy); window.location = url.toString(); }); } // Newsletter Form const newsletterForm = document.querySelector('[data-newsletter-form]'); if (newsletterForm) { newsletterForm.addEventListener('submit', async function(e) { e.preventDefault(); const email = this.querySelector('input[type="email"]').value; // Simulate API call showLoading(); await new Promise(resolve => setTimeout(resolve, 1000)); hideLoading(); showNotification('شكراً لك على الاشتراك في النشرة البريدية!', 'success'); this.reset(); }); } // Loading Functions function showLoading() { document.querySelector('.loading-overlay').classList.add('active'); } function hideLoading() { document.querySelector('.loading-overlay').classList.remove('active'); } // Notification System function showNotification(message, type = 'info') { const notification = document.createElement('div'); notification.className = `notification notification-${type}`; notification.innerHTML = ` <div class="notification-content"> <i class="fas fa-${getNotificationIcon(type)}"></i> <span>${message}</span> <button class="notification-close">&times;</button> </div> `; document.body.appendChild(notification); // Animate in setTimeout(() => { notification.classList.add('show'); }, 10); // Auto remove after 5 seconds setTimeout(() => { notification.classList.remove('show'); setTimeout(() => notification.remove(), 300); }, 5000); // Close button notification.querySelector('.notification-close').addEventListener('click', () => { notification.classList.remove('show'); setTimeout(() => notification.remove(), 300); }); } function getNotificationIcon(type) { const icons = { success: 'check-circle', error: 'times-circle', warning: 'exclamation-triangle', info: 'info-circle' }; return icons[type] || icons.info; } // Lazy Loading Images const lazyImages = document.querySelectorAll('img[data-lazy]'); if ('IntersectionObserver' in window) { const imageObserver = new IntersectionObserver((entries, observer) => { entries.forEach(entry => { if (entry.isIntersecting) { const img = entry.target; img.src = img.dataset.lazy; img.removeAttribute('data-lazy'); imageObserver.unobserve(img); } }); }); lazyImages.forEach(img => imageObserver.observe(img)); } else { // Fallback for older browsers lazyImages.forEach(img => { img.src = img.dataset.lazy; }); } // Product Countdown Timer const countdownElements = document.querySelectorAll('[data-countdown]'); countdownElements.forEach(element => { const endDate = new Date(element.dataset.countdown); const timer = setInterval(() => { const now = new Date(); const distance = endDate - now; if (distance < 0) { clearInterval(timer); element.innerHTML = 'العرض منتهي'; return; } const days = Math.floor(distance / (1000 * 60 * 60 * 24)); const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)); const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60)); const seconds = Math.floor((distance % (1000 * 60)) / 1000); element.innerHTML = ` <span class="countdown-item">${days} <small>يوم</small></span> <span class="countdown-item">${hours} <small>ساعة</small></span> <span class="countdown-item">${minutes} <small>دقيقة</small></span> <span class="countdown-item">${seconds} <small>ثانية</small></span> `; }, 1000); }); // Recently Viewed Products function addToRecentlyViewed(productId) { let recentlyViewed = JSON.parse(localStorage.getItem('recentlyViewed') || '[]'); // Remove if already exists recentlyViewed = recentlyViewed.filter(id => id !== productId); // Add to beginning recentlyViewed.unshift(productId); // Keep only last 10 recentlyViewed = recentlyViewed.slice(0, 10); localStorage.setItem('recentlyViewed', JSON.stringify(recentlyViewed)); } // If on product page, add to recently viewed const productId = document.querySelector('[data-product-id]')?.dataset.productId; if (productId) { addToRecentlyViewed(productId); } // Initialize AOS (Animate on Scroll) if available if (typeof AOS !== 'undefined') { AOS.init({ duration: 800, once: true, offset: 100 }); } // Share Buttons const shareButtons = document.querySelectorAll('[data-share]'); shareButtons.forEach(btn => { btn.addEventListener('click', function(e) { e.preventDefault(); const platform = this.dataset.share; const url = window.location.href; const title = document.title; let shareUrl; switch(platform) { case 'facebook': shareUrl = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(url)}`; break; case 'twitter': shareUrl = `https://twitter.com/intent/tweet?url=${encodeURIComponent(url)}&text=${encodeURIComponent(title)}`; break; case 'whatsapp': shareUrl = `https://wa.me/?text=${encodeURIComponent(title + ' ' + url)}`; break; case 'telegram': shareUrl = `https://t.me/share/url?url=${encodeURIComponent(url)}&text=${encodeURIComponent(title)}`; break; } if (shareUrl) { window.open(shareUrl, '_blank', 'width=600,height=400'); } }); }); // Initialize theme console.log('Theme initialized successfully!'); console.log('Locale:', theme.locale); console.log('RTL:', theme.rtl); }); // Notification Styles (add to CSS) const notificationStyles = ` <style> .notification { position: fixed; top: 100px; right: 20px; min-width: 300px; background: white; box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15); border-radius: 8px; padding: 15px; transform: translateX(400px); transition: transform 0.3s ease; z-index: 10000; } [dir="rtl"] .notification { right: auto; left: 20px; transform: translateX(-400px); } .notification.show { transform: translateX(0); } .notification-content { display: flex; align-items: center; gap: 10px; } .notification-close { margin-left: auto; background: transparent; border: none; font-size: 20px; cursor: pointer; color: #666; } .notification-success { border-left: 4px solid #28a745; } .notification-error { border-left: 4px solid #dc3545; } .notification-warning { border-left: 4px solid #ffc107; } .notification-info { border-left: 4px solid #17a2b8; } [dir="rtl"] .notification-success, [dir="rtl"] .notification-error, [dir="rtl"] .notification-warning, [dir="rtl"] .notification-info { border-left: none; border-right-width: 4px; border-right-style: solid; } .notification-success i { color: #28a745; } .notification-error i { color: #dc3545; } .notification-warning i { color: #ffc107; } .notification-info i { color: #17a2b8; } </style> `; document.head.insertAdjacentHTML('beforeend', notificationStyles);